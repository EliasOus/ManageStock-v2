generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Poste {
  GERANT
  GESTIONNAIRE
  TRAVAILLEUR
}

model Produit {
  id          String       @id @default(cuid())
  sku         String?       @unique
  name         String?
  description String?
  fournisseur String?
  quantite    Int
  prix        Float?

  receptions  Reception[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Commande {
  id                String       @id @default(cuid())
  numeroDeCommande  String       @unique
  sku               String
  name               String
  description       String
  fournisseur       String
  quantite          Int
  prix              Float
  dateCommande      DateTime     @default(now())

  utilisateurId     String
  user       User  @relation(fields: [utilisateurId], references: [id])

  receptions        Reception[]
  retours           Retour[]

  quantiteRecue     Int          @default(0)
  quantiteRetournee Int          @default(0)
  quantiteRestante  Int          @default(0)

  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
}

model Retour {
  id              String       @id @default(cuid())
  numeroDeRetour  String       @unique
  commandeId      String
  commande        Commande     @relation(fields: [commandeId], references: [id])

  utilisateurId   String
  user     User  @relation(fields: [utilisateurId], references: [id])

  quantite        Int
  motif           String
  statut          String       @default("EN ATTENTE")
  dateRetour      DateTime     @default(now())

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Reception {
  id            String       @id @default(cuid())
  commandeId    String
  commande      Commande     @relation(fields: [commandeId], references: [id])

  utilisateurId String
  user   User  @relation(fields: [utilisateurId], references: [id])

  produitId     String?
  produit       Produit?     @relation(fields: [produitId], references: [id])

  quantite      Int
  dateReception DateTime     @default(now())

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id             String       @id @default(cuid())
  email          String?      @unique
  name            String?
  nomUtilisateur String?       @unique
  motDePasse     String?
  poste          Poste?
  image          String?     
  emailVerified  DateTime?

  commandes      Commande[]
  receptions     Reception[]
  retours        Retour[]
  accounts       Account[]

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}